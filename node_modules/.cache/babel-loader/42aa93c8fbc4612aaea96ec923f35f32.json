{"remainingRequest":"/home/beanyon/Desktop/workspace/time-partner/node_modules/thread-loader/dist/cjs.js!/home/beanyon/Desktop/workspace/time-partner/node_modules/babel-loader/lib/index.js!/home/beanyon/Desktop/workspace/time-partner/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/beanyon/Desktop/workspace/time-partner/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/beanyon/Desktop/workspace/time-partner/src/components/Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/beanyon/Desktop/workspace/time-partner/src/components/Home.vue","mtime":1554813757857},{"path":"/home/beanyon/Desktop/workspace/time-partner/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/beanyon/Desktop/workspace/time-partner/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/beanyon/Desktop/workspace/time-partner/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/beanyon/Desktop/workspace/time-partner/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/beanyon/Desktop/workspace/time-partner/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _typeof from \"/home/beanyon/Desktop/workspace/time-partner/node_modules/@babel/runtime/helpers/esm/typeof\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.promise.finally\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'Home',\n  data: function data() {\n    return {\n      // 今日数据\n      today: {\n        date: '这里是今天的日期',\n        slogan: '这是我们相遇的第几天',\n        minutesSum: 0\n      },\n      // 时间卡片数组\n      timeCards: [],\n      // 显示日期选择对话框\n      showDateSelecter: false,\n      // 用户选择的日期\n      date: undefined\n    };\n  },\n  methods: {\n    /**\n     * 初始化\n     */\n    init: function init() {\n      if (!this.$cookies.get('id') || this.$cookies.get('id') == -1) {\n        var tel = this.$cookies.get('tel');\n        var password = this.$cookies.get('password');\n\n        if (tel && password) {\n          this.login(tel, password, 'home');\n        } else {\n          this.$router.push({\n            name: 'sign-in'\n          });\n        }\n      }\n\n      this.today.date = new Date().format('yyyy-MM-dd');\n      this.getTodayTimeCard();\n      this.getUserLoginTimes();\n    },\n\n    /**\n     * 获取用户登录过的天数\n     */\n    getUserLoginTimes: function getUserLoginTimes() {\n      var _this = this;\n\n      this.$http.get(this.BASE_API + '/get-user-login-times?user_id=' + this.$cookies.get('id')).then(function (response) {\n        if (response.body.result) {\n          if (response.body.data.count == 0) {\n            _this.today.slogan = '登录一下，开始一段故事';\n          } else {\n            _this.today.slogan = '这是我们相遇的第' + response.body.data.count + '天';\n          }\n        }\n      });\n    },\n\n    /**\n     * 更新分钟和\n     */\n    updateMinutesSum: function updateMinutesSum() {\n      var sum = 0;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.timeCards[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var timeCard = _step.value;\n          // 时间卡片的总时间\n          var timeCardSum = 0;\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = timeCard.timeSpans[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var timeSpan = _step2.value;\n\n              if (timeSpan.startTime && timeSpan.endTime) {\n                var span = timeSpan.endTime - timeSpan.startTime;\n                var spanSum = span / 1000 / 60; // 时间卡片的总时间\n\n                timeCardSum += Math.ceil(spanSum); // 今日总时间\n\n                sum += spanSum;\n              }\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n\n          timeCard.timeCardSum = timeCardSum;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.today.minutesSum = Math.ceil(sum);\n    },\n\n    /**\n     * 显示选择日期对话框\n     */\n    showSelectDate: function showSelectDate() {\n      this.showDateSelecter = true;\n    },\n\n    /**\n     * 隐藏选择日期对话框\n     */\n    hideSelectDate: function hideSelectDate() {\n      this.showDateSelecter = false;\n    },\n\n    /**\n     * 日期改变回调事件\n     */\n    onDateChange: function onDateChange(d) {\n      var _this2 = this;\n\n      if (d != undefined) {\n        var day = this.date.getDate();\n        var month = this.date.getMonth() + 1;\n        var year = this.date.getFullYear();\n\n        var _d = year + '-' + month + '-' + day; // 向服务器请求对应日期的数据\n\n\n        this.$http.get(this.BASE_API + '/get-time-card-by-date?user_id=' + this.$cookies.get('id') + '&date=' + _d).then(function (response) {\n          if (response.body.result) {\n            _this2.timeCards = response.body.data;\n\n            _this2.updateMinutesSum();\n\n            _this2.showDateSelecter = false;\n            _this2.date = undefined;\n          } else {\n            _this2.$toast.warning(response.body.message);\n          }\n        });\n      }\n    },\n\n    /**\n     * 创建时间卡片\n     */\n    createTimeCard: function createTimeCard() {\n      var _this3 = this;\n\n      this.$http.get(this.BASE_API + '/create-time-card?user_id=' + this.$cookies.get('id')).then(function (response) {\n        if (response.body.result) {\n          _this3.getTodayTimeCard();\n\n          _this3.$toast.success(response.body.message);\n        } else {\n          _this3.$toast.error(response.body.message);\n        }\n      });\n    },\n\n    /**\n     * 为时间卡片添加时间段\n     */\n    createTimeSpan: function createTimeSpan(cardIndex) {\n      this.timeCards[cardIndex].timeSpans.push({\n        id: -1,\n        startTime: 0,\n        endTime: 0\n      });\n    },\n\n    /**\n     * 获取今天的时间卡片\n     */\n    getTodayTimeCard: function getTodayTimeCard() {\n      var _this4 = this;\n\n      this.$http.get(this.BASE_API + '/get-today-time-card?user_id=' + this.$cookies.get('id')).then(function (response) {\n        if (response.body.result) {\n          _this4.timeCards = response.body.data;\n\n          _this4.updateMinutesSum();\n        }\n      });\n    },\n\n    /**\n     * 事件选择器值发生变化的监听器，用于创建TimeCard的TimeSpan\n     */\n    onDatePickerChange: function onDatePickerChange(cardIndex, spanIndex, type) {\n      var _this5 = this;\n\n      var startTime = this.timeCards[cardIndex].timeSpans[spanIndex].startTime;\n      var endTime = this.timeCards[cardIndex].timeSpans[spanIndex].endTime;\n      var cardId = this.timeCards[cardIndex].id;\n      var spanId = this.timeCards[cardIndex].timeSpans[spanIndex].id;\n\n      if (_typeof(startTime) == 'object') {\n        startTime = startTime.getTime();\n      }\n\n      if (_typeof(endTime) == 'object') {\n        endTime = endTime.getTime();\n      }\n\n      if (endTime && startTime && parseInt((endTime - startTime) / 1000) <= 0) {\n        this.$toast.error('开始时间必须小于结束时间，请重新输入');\n        this.timeCards[cardIndex].timeSpans[spanIndex].endTime = 0;\n        return;\n      }\n\n      if (spanId == -1) {\n        // 不存在，需要创建\n        if (startTime) {\n          // 使用开始时间创建\n          this.$http.get(this.BASE_API + '/create-time-span?card_id=' + cardId + '&start_time=' + startTime).then(function (response) {\n            if (response.body.result) {\n              _this5.getTodayTimeCard();\n\n              _this5.$toast.success(response.body.message);\n            } else {\n              _this5.$toast.error(response.body.message);\n            }\n          });\n        } else {\n          // 开始时间为空，无法创建\n          this.$toast.error('请先输入开始时间');\n          this.timeCards[cardIndex].timeSpans[spanIndex].endTime = 0;\n          return;\n        }\n      } else {\n        // 已经存在，更新\n        if (startTime && type == 0) {\n          // 开始时间不空，并且不是string类型\n          if (endTime - startTime >= 0) {\n            // 结束时间大于开始时间，更新\n            this.$http.get(this.BASE_API + '/update-time-span?card_id=' + cardId + '&span_id=' + spanId + '&start_time=' + startTime).then(function (response) {\n              if (response.body.result) {\n                _this5.getTodayTimeCard();\n\n                _this5.$toast.success(response.body.message);\n              } else {\n                _this5.$toast.error(response.body.message);\n              }\n            });\n          } else {\n            // 结束时间不大于开始时间，无法更新\n            this.$toast.error('开始时间必须小于结束时间，请重新输入');\n            this.timeCards[cardIndex].timeSpans[spanIndex].startTime = 0;\n          }\n        }\n\n        if (endTime && type == 1) {\n          // 结束时间不空，并且不是string类型\n          if (endTime - startTime >= 0) {\n            // 结束时间大于开始时间，更新\n            this.$http.get(this.BASE_API + '/update-time-span?card_id=' + cardId + '&span_id=' + spanId + '&end_time=' + endTime).then(function (response) {\n              if (response.body.result) {\n                _this5.getTodayTimeCard();\n\n                _this5.$toast.success(response.body.message);\n              } else {\n                _this5.$toast.error(response.body.message);\n              }\n            });\n          } else {\n            // 结束时间不大于开始时间，无法更新\n            this.$toast.error('开始时间必须小于结束时间，请重新输入');\n            this.timeCards[cardIndex].timeSpans[spanIndex].endTime = 0;\n          }\n        }\n      }\n    },\n\n    /**\n     * 更新TimeCard的activity\n     */\n    updateCardActivity: function updateCardActivity(cardIndex) {\n      var _this6 = this;\n\n      var cardId = this.timeCards[cardIndex].id;\n      var activity = this.timeCards[cardIndex].activity.trim();\n\n      if (activity.length > 0) {\n        this.$http.get(this.BASE_API + '/update-card-activity?card_id=' + cardId + '&activity=' + activity).then(function (response) {\n          if (response.body.result) {\n            _this6.$toast.success(response.body.message);\n          } else {\n            _this6.$toast.error(response.body.message);\n          }\n        });\n      }\n    },\n\n    /**\n     * 删除时间卡片\n     */\n    deleteTimeCard: function deleteTimeCard(cardIndex) {\n      var _this7 = this;\n\n      var cardId = this.timeCards[cardIndex].id;\n      this.$http.get(this.BASE_API + '/delete-time-card?card_id=' + cardId).then(function (response) {\n        if (response.body.result) {\n          if (_this7.timeCards.length > 1) {\n            _this7.getTodayTimeCard();\n          } else {\n            _this7.timeCards = [];\n            _this7.today.minutesSum = 0;\n          }\n\n          _this7.$toast.success(response.body.message);\n        } else {\n          _this7.$toast.error(response.body.message);\n        }\n      });\n    }\n  },\n  mounted: function mounted() {\n    this.init();\n  }\n};",{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0EA,eAAA;AACA,EAAA,IAAA,EAAA,MADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA;AACA,MAAA,KAAA,EAAA;AACA,QAAA,IAAA,EAAA,UADA;AAEA,QAAA,MAAA,EAAA,YAFA;AAGA,QAAA,UAAA,EAAA;AAHA,OAFA;AAOA;AACA,MAAA,SAAA,EAAA,EARA;AASA;AACA,MAAA,gBAAA,EAAA,KAVA;AAWA;AACA,MAAA,IAAA,EAAA;AAZA,KAAA;AAcA,GAjBA;AAkBA,EAAA,OAAA,EAAA;AACA;;;AAGA,IAAA,IAJA,kBAIA;AACA,UAAA,CAAA,KAAA,QAAA,CAAA,GAAA,CAAA,IAAA,CAAA,IAAA,KAAA,QAAA,CAAA,GAAA,CAAA,IAAA,KAAA,CAAA,CAAA,EAAA;AACA,YAAA,GAAA,GAAA,KAAA,QAAA,CAAA,GAAA,CAAA,KAAA,CAAA;AACA,YAAA,QAAA,GAAA,KAAA,QAAA,CAAA,GAAA,CAAA,UAAA,CAAA;;AACA,YAAA,GAAA,IAAA,QAAA,EAAA;AACA,eAAA,KAAA,CAAA,GAAA,EAAA,QAAA,EAAA,MAAA;AACA,SAFA,MAEA;AACA,eAAA,OAAA,CAAA,IAAA,CAAA;AAAA,YAAA,IAAA,EAAA;AAAA,WAAA;AACA;AACA;;AAEA,WAAA,KAAA,CAAA,IAAA,GAAA,IAAA,IAAA,GAAA,MAAA,CAAA,YAAA,CAAA;AACA,WAAA,gBAAA;AACA,WAAA,iBAAA;AACA,KAlBA;;AAoBA;;;AAGA,IAAA,iBAvBA,+BAuBA;AAAA;;AACA,WAAA,KAAA,CAAA,GAAA,CAAA,KAAA,QAAA,GAAA,gCAAA,GAAA,KAAA,QAAA,CAAA,GAAA,CAAA,IAAA,CAAA,EAAA,IAAA,CAAA,UAAA,QAAA,EAAA;AACA,YAAA,QAAA,CAAA,IAAA,CAAA,MAAA,EAAA;AACA,cAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,KAAA,IAAA,CAAA,EAAA;AACA,YAAA,KAAA,CAAA,KAAA,CAAA,MAAA,GAAA,aAAA;AACA,WAFA,MAEA;AACA,YAAA,KAAA,CAAA,KAAA,CAAA,MAAA,GAAA,aAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,KAAA,GAAA,GAAA;AACA;AACA;AACA,OARA;AASA,KAjCA;;AAmCA;;;AAGA,IAAA,gBAtCA,8BAsCA;AACA,UAAA,GAAA,GAAA,CAAA;AADA;AAAA;AAAA;;AAAA;AAEA,6BAAA,KAAA,SAAA,8HAAA;AAAA,cAAA,QAAA;AACA;AACA,cAAA,WAAA,GAAA,CAAA;AAFA;AAAA;AAAA;;AAAA;AAIA,kCAAA,QAAA,CAAA,SAAA,mIAAA;AAAA,kBAAA,QAAA;;AACA,kBAAA,QAAA,CAAA,SAAA,IAAA,QAAA,CAAA,OAAA,EAAA;AACA,oBAAA,IAAA,GAAA,QAAA,CAAA,OAAA,GAAA,QAAA,CAAA,SAAA;AACA,oBAAA,OAAA,GAAA,IAAA,GAAA,IAAA,GAAA,EAAA,CAFA,CAGA;;AACA,gBAAA,WAAA,IAAA,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAJA,CAKA;;AACA,gBAAA,GAAA,IAAA,OAAA;AACA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,UAAA,QAAA,CAAA,WAAA,GAAA,WAAA;AACA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBA,WAAA,KAAA,CAAA,UAAA,GAAA,IAAA,CAAA,IAAA,CAAA,GAAA,CAAA;AACA,KA1DA;;AA4DA;;;AAGA,IAAA,cA/DA,4BA+DA;AACA,WAAA,gBAAA,GAAA,IAAA;AACA,KAjEA;;AAmEA;;;AAGA,IAAA,cAtEA,4BAsEA;AACA,WAAA,gBAAA,GAAA,KAAA;AACA,KAxEA;;AA0EA;;;AAGA,IAAA,YA7EA,wBA6EA,CA7EA,EA6EA;AAAA;;AACA,UAAA,CAAA,IAAA,SAAA,EAAA;AACA,YAAA,GAAA,GAAA,KAAA,IAAA,CAAA,OAAA,EAAA;AACA,YAAA,KAAA,GAAA,KAAA,IAAA,CAAA,QAAA,KAAA,CAAA;AACA,YAAA,IAAA,GAAA,KAAA,IAAA,CAAA,WAAA,EAAA;;AACA,YAAA,EAAA,GAAA,IAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,CAJA,CAKA;;;AACA,aAAA,KAAA,CAAA,GAAA,CAAA,KAAA,QAAA,GAAA,iCAAA,GAAA,KAAA,QAAA,CAAA,GAAA,CAAA,IAAA,CAAA,GAAA,QAAA,GAAA,EAAA,EAAA,IAAA,CAAA,UAAA,QAAA,EAAA;AACA,cAAA,QAAA,CAAA,IAAA,CAAA,MAAA,EAAA;AACA,YAAA,MAAA,CAAA,SAAA,GAAA,QAAA,CAAA,IAAA,CAAA,IAAA;;AACA,YAAA,MAAA,CAAA,gBAAA;;AACA,YAAA,MAAA,CAAA,gBAAA,GAAA,KAAA;AACA,YAAA,MAAA,CAAA,IAAA,GAAA,SAAA;AACA,WALA,MAKA;AACA,YAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,QAAA,CAAA,IAAA,CAAA,OAAA;AACA;AACA,SATA;AAUA;AACA,KA/FA;;AAiGA;;;AAGA,IAAA,cApGA,4BAoGA;AAAA;;AACA,WAAA,KAAA,CAAA,GAAA,CAAA,KAAA,QAAA,GAAA,4BAAA,GAAA,KAAA,QAAA,CAAA,GAAA,CAAA,IAAA,CAAA,EAAA,IAAA,CAAA,UAAA,QAAA,EAAA;AACA,YAAA,QAAA,CAAA,IAAA,CAAA,MAAA,EAAA;AACA,UAAA,MAAA,CAAA,gBAAA;;AACA,UAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,QAAA,CAAA,IAAA,CAAA,OAAA;AACA,SAHA,MAGA;AACA,UAAA,MAAA,CAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,IAAA,CAAA,OAAA;AACA;AACA,OAPA;AAQA,KA7GA;;AA+GA;;;AAGA,IAAA,cAlHA,0BAkHA,SAlHA,EAkHA;AACA,WAAA,SAAA,CAAA,SAAA,EAAA,SAAA,CAAA,IAAA,CAAA;AACA,QAAA,EAAA,EAAA,CAAA,CADA;AAEA,QAAA,SAAA,EAAA,CAFA;AAGA,QAAA,OAAA,EAAA;AAHA,OAAA;AAKA,KAxHA;;AA0HA;;;AAGA,IAAA,gBA7HA,8BA6HA;AAAA;;AACA,WAAA,KAAA,CAAA,GAAA,CAAA,KAAA,QAAA,GAAA,+BAAA,GAAA,KAAA,QAAA,CAAA,GAAA,CAAA,IAAA,CAAA,EAAA,IAAA,CAAA,UAAA,QAAA,EAAA;AACA,YAAA,QAAA,CAAA,IAAA,CAAA,MAAA,EAAA;AACA,UAAA,MAAA,CAAA,SAAA,GAAA,QAAA,CAAA,IAAA,CAAA,IAAA;;AACA,UAAA,MAAA,CAAA,gBAAA;AACA;AACA,OALA;AAMA,KApIA;;AAsIA;;;AAGA,IAAA,kBAzIA,8BAyIA,SAzIA,EAyIA,SAzIA,EAyIA,IAzIA,EAyIA;AAAA;;AACA,UAAA,SAAA,GAAA,KAAA,SAAA,CAAA,SAAA,EAAA,SAAA,CAAA,SAAA,EAAA,SAAA;AACA,UAAA,OAAA,GAAA,KAAA,SAAA,CAAA,SAAA,EAAA,SAAA,CAAA,SAAA,EAAA,OAAA;AACA,UAAA,MAAA,GAAA,KAAA,SAAA,CAAA,SAAA,EAAA,EAAA;AACA,UAAA,MAAA,GAAA,KAAA,SAAA,CAAA,SAAA,EAAA,SAAA,CAAA,SAAA,EAAA,EAAA;;AAEA,UAAA,QAAA,SAAA,KAAA,QAAA,EAAA;AACA,QAAA,SAAA,GAAA,SAAA,CAAA,OAAA,EAAA;AACA;;AAEA,UAAA,QAAA,OAAA,KAAA,QAAA,EAAA;AACA,QAAA,OAAA,GAAA,OAAA,CAAA,OAAA,EAAA;AACA;;AAEA,UAAA,OAAA,IAAA,SAAA,IAAA,QAAA,CAAA,CAAA,OAAA,GAAA,SAAA,IAAA,IAAA,CAAA,IAAA,CAAA,EAAA;AACA,aAAA,MAAA,CAAA,KAAA,CAAA,oBAAA;AACA,aAAA,SAAA,CAAA,SAAA,EAAA,SAAA,CAAA,SAAA,EAAA,OAAA,GAAA,CAAA;AACA;AACA;;AAEA,UAAA,MAAA,IAAA,CAAA,CAAA,EAAA;AACA;AACA,YAAA,SAAA,EAAA;AACA;AACA,eAAA,KAAA,CAAA,GAAA,CAAA,KAAA,QAAA,GAAA,4BAAA,GAAA,MAAA,GAAA,cAAA,GAAA,SAAA,EAAA,IAAA,CAAA,UAAA,QAAA,EAAA;AACA,gBAAA,QAAA,CAAA,IAAA,CAAA,MAAA,EAAA;AACA,cAAA,MAAA,CAAA,gBAAA;;AACA,cAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,QAAA,CAAA,IAAA,CAAA,OAAA;AACA,aAHA,MAGA;AACA,cAAA,MAAA,CAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,IAAA,CAAA,OAAA;AACA;AACA,WAPA;AAQA,SAVA,MAUA;AACA;AACA,eAAA,MAAA,CAAA,KAAA,CAAA,UAAA;AACA,eAAA,SAAA,CAAA,SAAA,EAAA,SAAA,CAAA,SAAA,EAAA,OAAA,GAAA,CAAA;AACA;AACA;AACA,OAlBA,MAkBA;AACA;AACA,YAAA,SAAA,IAAA,IAAA,IAAA,CAAA,EAAA;AACA;AACA,cAAA,OAAA,GAAA,SAAA,IAAA,CAAA,EAAA;AACA;AACA,iBAAA,KAAA,CAAA,GAAA,CAAA,KAAA,QAAA,GAAA,4BAAA,GAAA,MAAA,GAAA,WAAA,GAAA,MAAA,GAAA,cAAA,GAAA,SAAA,EAAA,IAAA,CAAA,UAAA,QAAA,EAAA;AACA,kBAAA,QAAA,CAAA,IAAA,CAAA,MAAA,EAAA;AACA,gBAAA,MAAA,CAAA,gBAAA;;AACA,gBAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,QAAA,CAAA,IAAA,CAAA,OAAA;AACA,eAHA,MAGA;AACA,gBAAA,MAAA,CAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,IAAA,CAAA,OAAA;AACA;AACA,aAPA;AAQA,WAVA,MAUA;AACA;AACA,iBAAA,MAAA,CAAA,KAAA,CAAA,oBAAA;AACA,iBAAA,SAAA,CAAA,SAAA,EAAA,SAAA,CAAA,SAAA,EAAA,SAAA,GAAA,CAAA;AACA;AACA;;AAEA,YAAA,OAAA,IAAA,IAAA,IAAA,CAAA,EAAA;AACA;AACA,cAAA,OAAA,GAAA,SAAA,IAAA,CAAA,EAAA;AACA;AACA,iBAAA,KAAA,CAAA,GAAA,CAAA,KAAA,QAAA,GAAA,4BAAA,GAAA,MAAA,GAAA,WAAA,GAAA,MAAA,GAAA,YAAA,GAAA,OAAA,EAAA,IAAA,CAAA,UAAA,QAAA,EAAA;AACA,kBAAA,QAAA,CAAA,IAAA,CAAA,MAAA,EAAA;AACA,gBAAA,MAAA,CAAA,gBAAA;;AACA,gBAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,QAAA,CAAA,IAAA,CAAA,OAAA;AACA,eAHA,MAGA;AACA,gBAAA,MAAA,CAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,IAAA,CAAA,OAAA;AACA;AACA,aAPA;AAQA,WAVA,MAUA;AACA;AACA,iBAAA,MAAA,CAAA,KAAA,CAAA,oBAAA;AACA,iBAAA,SAAA,CAAA,SAAA,EAAA,SAAA,CAAA,SAAA,EAAA,OAAA,GAAA,CAAA;AACA;AACA;AACA;AACA,KAvNA;;AAyNA;;;AAGA,IAAA,kBA5NA,8BA4NA,SA5NA,EA4NA;AAAA;;AACA,UAAA,MAAA,GAAA,KAAA,SAAA,CAAA,SAAA,EAAA,EAAA;AACA,UAAA,QAAA,GAAA,KAAA,SAAA,CAAA,SAAA,EAAA,QAAA,CAAA,IAAA,EAAA;;AAEA,UAAA,QAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,aAAA,KAAA,CAAA,GAAA,CAAA,KAAA,QAAA,GAAA,gCAAA,GAAA,MAAA,GAAA,YAAA,GAAA,QAAA,EAAA,IAAA,CAAA,UAAA,QAAA,EAAA;AACA,cAAA,QAAA,CAAA,IAAA,CAAA,MAAA,EAAA;AACA,YAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,QAAA,CAAA,IAAA,CAAA,OAAA;AACA,WAFA,MAEA;AACA,YAAA,MAAA,CAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,IAAA,CAAA,OAAA;AACA;AACA,SANA;AAOA;AACA,KAzOA;;AA2OA;;;AAGA,IAAA,cA9OA,0BA8OA,SA9OA,EA8OA;AAAA;;AACA,UAAA,MAAA,GAAA,KAAA,SAAA,CAAA,SAAA,EAAA,EAAA;AAEA,WAAA,KAAA,CAAA,GAAA,CAAA,KAAA,QAAA,GAAA,4BAAA,GAAA,MAAA,EAAA,IAAA,CAAA,UAAA,QAAA,EAAA;AACA,YAAA,QAAA,CAAA,IAAA,CAAA,MAAA,EAAA;AACA,cAAA,MAAA,CAAA,SAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,YAAA,MAAA,CAAA,gBAAA;AACA,WAFA,MAEA;AACA,YAAA,MAAA,CAAA,SAAA,GAAA,EAAA;AACA,YAAA,MAAA,CAAA,KAAA,CAAA,UAAA,GAAA,CAAA;AACA;;AACA,UAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,QAAA,CAAA,IAAA,CAAA,OAAA;AACA,SARA,MAQA;AACA,UAAA,MAAA,CAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,IAAA,CAAA,OAAA;AACA;AACA,OAZA;AAaA;AA9PA,GAlBA;AAkRA,EAAA,OAlRA,qBAkRA;AACA,SAAA,IAAA;AACA;AApRA,CAAA","sourcesContent":["<template>\n  <mu-container>\n    <!-- TitleBar -->\n    <mu-appbar style=\"width: 100%;\" color=\"primary\">\n      <mu-button icon slot=\"left\" @click=\"showSelectDate()\">\n        <mu-icon value=\"access_time\"></mu-icon>\n      </mu-button>\n      时间卡片\n      <mu-button icon slot=\"right\" @click=\"createTimeCard()\">\n        <mu-icon value=\"add\"></mu-icon>\n      </mu-button>\n    </mu-appbar>\n    <!-- Main Content -->\n    <div style=\"width: 100%; background: #fff; padding: 18px;\">\n      <router-link to=\"/sign-in\">\n        <mu-card class=\"card-header\">\n          <mu-card-header :title=\"today.date\" :sub-title=\"today.slogan\">\n            <mu-avatar slot=\"avatar\">\n                <img src=\"../assets/avatar.jpg\">\n            </mu-avatar>\n          </mu-card-header>\n          <mu-paper class=\"demo-paper card-header-panel\" :z-depth=\"0\" :circle=\"true\">\n            {{today.minutesSum || 0}} min\n          </mu-paper>\n        </mu-card>\n      </router-link>\n      <mu-card class=\"time-card\" v-for=\"(timeCard, cardIndex) in timeCards\" :key=\"cardIndex\">\n        <mu-icon value=\"clear\" class=\"delete-time-card\" @click=\"deleteTimeCard(cardIndex)\"></mu-icon>\n        <mu-card-text>\n          <mu-form :model=\"timeCard\" class=\"mu-demo-form\">\n            <mu-form-item prop=\"activity\">\n              <mu-text-field placeholder='请输入活动名称，如‘学习英语’' v-model=\"timeCard.activity\" @change=\"updateCardActivity(cardIndex)\"></mu-text-field>\n            </mu-form-item>\n            <mu-flex class=\"flex-wrapper\" align-items=\"center\" v-for=\"(timeSpan, spanIndex) in timeCard.timeSpans\" :key=\"spanIndex\">\n              <mu-flex class=\"flex-demo\" justify-content=\"center\" fill>\n                <mu-date-input placeholder=\"开始时间\" v-model=\"timeSpan.startTime\" type=\"time\" view-type=\"list\" clock-type=\"24hr\" @change=\"onDatePickerChange(cardIndex, spanIndex, 0)\"></mu-date-input>\n              </mu-flex>\n              <mu-flex class=\"flex-demo\" justify-content=\"center\" fill>\n                <mu-date-input placeholder=\"结束时间\" v-model=\"timeSpan.endTime\" type=\"time\" view-type=\"list\" clock-type=\"24hr\" @change=\"onDatePickerChange(cardIndex, spanIndex, 1)\"></mu-date-input>\n              </mu-flex>\n            </mu-flex>\n            <mu-flex class=\"time-card-sum\">\n              小计： {{timeCard.timeCardSum || 0}} min\n            </mu-flex>\n            <mu-button full-width color=\"primary\" @click=\"createTimeSpan(cardIndex)\">\n              <mu-icon value=\"add\" left></mu-icon>\n              添加时间段\n            </mu-button>\n          </mu-form>\n        </mu-card-text>\n      </mu-card>\n    </div>\n    <!-- 半透明mask -->\n    <mu-container v-if=\"showDateSelecter\" class=\"date-selector-mask\">\n    </mu-container>\n    <mu-container v-if=\"showDateSelecter\">\n      <mu-flex justify-content=\"center\" align-items=\"center\" class=\"date-selector\">\n        <mu-paper :z-depth=\"1\">\n          <mu-date-picker :date.sync=\"date\" :change=\"onDateChange(date)\"></mu-date-picker>\n        </mu-paper>\n        <mu-button icon @click=\"hideSelectDate()\" class=\"date-selector-closer\">\n          <mu-icon value=\"highlight_off\"></mu-icon>\n        </mu-button>\n      </mu-flex>\n    </mu-container>\n    <!-- <router-link to=\"/sign-up\">\n      <mu-button full-width color=\"primary\">\n        <mu-icon value=\"add\" left></mu-icon>\n        注册\n      </mu-button>\n    </router-link> -->\n  </mu-container>\n</template>\n<script>\nexport default {\n  name: 'Home',\n  data() {\n    return {\n      // 今日数据\n      today: {\n        date: '这里是今天的日期',\n        slogan: '这是我们相遇的第几天',\n        minutesSum: 0\n      },\n      // 时间卡片数组\n      timeCards: [],\n      // 显示日期选择对话框\n      showDateSelecter: false,\n      // 用户选择的日期\n      date: undefined\n    }\n  },\n  methods: {\n    /**\n     * 初始化\n     */\n    init() {\n      if(!this.$cookies.get('id') || this.$cookies.get('id') == -1) {\n        let tel = this.$cookies.get('tel')\n        let password = this.$cookies.get('password')\n        if(tel && password){\n          this.login(tel, password, 'home')\n        } else {\n          this.$router.push({ name: 'sign-in' });\n        }\n      }\n      \n      this.today.date = new Date().format('yyyy-MM-dd')\n      this.getTodayTimeCard()\n      this.getUserLoginTimes()\n    },\n\n    /**\n     * 获取用户登录过的天数\n     */\n    getUserLoginTimes() {\n      this.$http.get(this.BASE_API + '/get-user-login-times?user_id=' + this.$cookies.get('id')).then(response => {\n        if (response.body.result) {\n          if(response.body.data.count == 0) {\n            this.today.slogan = '登录一下，开始一段故事'\n          } else {\n            this.today.slogan = '这是我们相遇的第' + response.body.data.count + '天'\n          }\n        }\n      })\n    },\n\n    /**\n     * 更新分钟和\n     */\n    updateMinutesSum() {\n      let sum = 0\n      for(let timeCard of this.timeCards) {\n        // 时间卡片的总时间\n        let timeCardSum = 0\n\n        for(let timeSpan of timeCard.timeSpans) {\n          if(timeSpan.startTime && timeSpan.endTime) {\n            let span = timeSpan.endTime - timeSpan.startTime\n            let spanSum = span / 1000 / 60\n            // 时间卡片的总时间\n            timeCardSum += Math.ceil(spanSum)\n            // 今日总时间\n            sum += spanSum\n          }\n        }\n\n        timeCard.timeCardSum = timeCardSum\n      }\n      this.today.minutesSum = Math.ceil(sum)\n    },\n\n    /**\n     * 显示选择日期对话框\n     */\n    showSelectDate() {\n      this.showDateSelecter = true\n    },\n\n    /**\n     * 隐藏选择日期对话框\n     */\n    hideSelectDate() {\n      this.showDateSelecter = false\n    },\n\n    /**\n     * 日期改变回调事件\n     */\n    onDateChange(d) {\n      if(d != undefined) {\n        let day = this.date.getDate()\n        let month = this.date.getMonth() + 1\n        let year = this.date.getFullYear()\n        let d = year + '-' + month + '-' + day\n        // 向服务器请求对应日期的数据\n        this.$http.get(this.BASE_API + '/get-time-card-by-date?user_id=' + this.$cookies.get('id') + '&date=' + d).then(response => {\n          if (response.body.result) {\n            this.timeCards = response.body.data\n            this.updateMinutesSum()\n            this.showDateSelecter = false\n            this.date = undefined\n          } else {\n            this.$toast.warning(response.body.message)\n          }\n        })\n      }\n    },\n\n    /**\n     * 创建时间卡片\n     */\n    createTimeCard() {\n      this.$http.get(this.BASE_API + '/create-time-card?user_id=' + this.$cookies.get('id')).then(response => {\n        if (response.body.result) {\n          this.getTodayTimeCard()\n          this.$toast.success(response.body.message)\n        } else {\n          this.$toast.error(response.body.message)\n        }\n      })\n    },\n\n    /**\n     * 为时间卡片添加时间段\n     */\n    createTimeSpan(cardIndex) {\n      this.timeCards[cardIndex].timeSpans.push({\n        id: -1,\n        startTime: 0,\n        endTime: 0\n      })\n    },\n\n    /**\n     * 获取今天的时间卡片\n     */\n    getTodayTimeCard() {\n      this.$http.get(this.BASE_API + '/get-today-time-card?user_id=' + this.$cookies.get('id')).then(response => {\n        if (response.body.result) {\n          this.timeCards = response.body.data\n          this.updateMinutesSum()\n        }\n      })\n    },\n\n    /**\n     * 事件选择器值发生变化的监听器，用于创建TimeCard的TimeSpan\n     */\n    onDatePickerChange(cardIndex, spanIndex, type) {\n      let startTime = this.timeCards[cardIndex].timeSpans[spanIndex].startTime\n      let endTime = this.timeCards[cardIndex].timeSpans[spanIndex].endTime\n      let cardId = this.timeCards[cardIndex].id\n      let spanId = this.timeCards[cardIndex].timeSpans[spanIndex].id\n\n      if(typeof startTime == 'object') {\n        startTime = startTime.getTime()\n      }\n\n      if(typeof endTime == 'object') {\n        endTime = endTime.getTime()\n      }\n      \n      if(endTime && startTime && parseInt((endTime - startTime)/1000) <= 0) {\n        this.$toast.error('开始时间必须小于结束时间，请重新输入')\n        this.timeCards[cardIndex].timeSpans[spanIndex].endTime = 0\n        return\n      }\n\n      if(spanId == -1) {\n        // 不存在，需要创建\n        if(startTime) {\n          // 使用开始时间创建\n          this.$http.get(this.BASE_API + '/create-time-span?card_id=' + cardId + '&start_time=' + startTime).then(response => {\n            if (response.body.result) {\n              this.getTodayTimeCard()\n              this.$toast.success(response.body.message)\n            } else {\n              this.$toast.error(response.body.message)\n            }\n          })\n        } else {\n          // 开始时间为空，无法创建\n          this.$toast.error('请先输入开始时间')\n          this.timeCards[cardIndex].timeSpans[spanIndex].endTime = 0\n          return\n        }\n      } else {\n        // 已经存在，更新\n        if(startTime && type == 0) {\n          // 开始时间不空，并且不是string类型\n          if(endTime - startTime >= 0) {\n            // 结束时间大于开始时间，更新\n            this.$http.get(this.BASE_API + '/update-time-span?card_id=' + cardId + '&span_id=' + spanId + '&start_time=' + startTime).then(response => {\n              if (response.body.result) {\n                this.getTodayTimeCard()\n                this.$toast.success(response.body.message)\n              } else {\n                this.$toast.error(response.body.message)\n              }\n            })\n          } else {\n            // 结束时间不大于开始时间，无法更新\n            this.$toast.error('开始时间必须小于结束时间，请重新输入')\n            this.timeCards[cardIndex].timeSpans[spanIndex].startTime = 0\n          }\n        }\n        \n        if(endTime && type == 1) {\n          // 结束时间不空，并且不是string类型\n          if(endTime - startTime >= 0) {\n            // 结束时间大于开始时间，更新\n            this.$http.get(this.BASE_API + '/update-time-span?card_id=' + cardId + '&span_id=' + spanId + '&end_time=' + endTime).then(response => {\n              if (response.body.result) {\n                this.getTodayTimeCard()\n                this.$toast.success(response.body.message)\n              } else {\n                this.$toast.error(response.body.message)\n              }\n            })\n          } else {\n            // 结束时间不大于开始时间，无法更新\n            this.$toast.error('开始时间必须小于结束时间，请重新输入')\n            this.timeCards[cardIndex].timeSpans[spanIndex].endTime = 0\n          }\n        }\n      }\n    },\n\n    /**\n     * 更新TimeCard的activity\n     */\n    updateCardActivity(cardIndex) {\n      let cardId = this.timeCards[cardIndex].id\n      let activity = this.timeCards[cardIndex].activity.trim()\n\n      if(activity.length > 0){\n        this.$http.get(this.BASE_API + '/update-card-activity?card_id=' + cardId + '&activity=' + activity).then(response => {\n          if (response.body.result) {\n            this.$toast.success(response.body.message)\n          } else {\n            this.$toast.error(response.body.message)\n          }\n        })\n      }\n    },\n\n    /**\n     * 删除时间卡片\n     */\n    deleteTimeCard(cardIndex) {\n      let cardId = this.timeCards[cardIndex].id\n\n      this.$http.get(this.BASE_API + '/delete-time-card?card_id=' + cardId).then(response => {\n        if (response.body.result) {\n          if (this.timeCards.length > 1){\n            this.getTodayTimeCard()\n          } else {\n            this.timeCards = []\n            this.today.minutesSum = 0\n          }\n          this.$toast.success(response.body.message)\n        } else {\n          this.$toast.error(response.body.message)\n        }\n      })\n    }\n  },\n  mounted() {\n    this.init()\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.card-header {\n  position: relative;\n}\n.card-header-panel {\n  position: absolute;\n  right: 26px;\n  top: 6px;\n  height: 64px;\n  line-height: 64px;\n  text-align: center;\n  font-size: 16px;\n  font-weight: 400;\n  font-style: italic;\n}\n.time-card {\n  position: relative;\n  width: 100%;\n  margin: 12px auto;\n}\n.time-card-sum {\n  font-size: 18px;\n  float: right;\n  margin-bottom: 26px;\n}\n.delete-time-card {\n  width: 26px;\n  height: 26px;\n  position: absolute;\n  top: -8px;\n  right: -13px;\n  border: 1px solid #ccc;\n  border-radius: 50%;\n  background: #fff;\n}\n.flex-demo {\n  width: 0px;\n  text-align: center;\n}\n.date-selector-mask {\n  position: fixed;\n  width: 100vw;\n  height: 100vh;\n  position: fixed;\n  top: 0;\n  left: 0;\n  background: #000;\n  opacity: 0.7;\n  z-index: 1;\n}\n.date-selector {\n  position: fixed;\n  width: 100vw;\n  height: 100vh;\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 100;\n  display: flex;\n  flex-direction: row;\n}\n.date-selector-closer {\n  margin: 0 auto; \n  position: fixed; \n  bottom: 4vh;\n  color: #fff;\n  width: 72px;\n  height: 72px;\n}\n.date-selector-closer i {\n  font-size: 42px;\n}\n</style>\n"],"sourceRoot":"src/components"}]}