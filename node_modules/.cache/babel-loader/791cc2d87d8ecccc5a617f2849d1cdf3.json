{"remainingRequest":"/home/beanyon/Desktop/workspace/time-partner/node_modules/thread-loader/dist/cjs.js!/home/beanyon/Desktop/workspace/time-partner/node_modules/babel-loader/lib/index.js!/home/beanyon/Desktop/workspace/time-partner/node_modules/eslint-loader/index.js??ref--13-0!/home/beanyon/Desktop/workspace/time-partner/src/libs/md5.js","dependencies":[{"path":"/home/beanyon/Desktop/workspace/time-partner/src/libs/md5.js","mtime":1545400503249},{"path":"/home/beanyon/Desktop/workspace/time-partner/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/beanyon/Desktop/workspace/time-partner/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/beanyon/Desktop/workspace/time-partner/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/beanyon/Desktop/workspace/time-partner/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["/*\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\n\n/*\n * Configurable variables. You may need to tweak these to be compatible with\n * the server-side, but the defaults work in most cases.\n */\nvar hexcase = 0;\n/* hex output format. 0 - lowercase; 1 - uppercase        */\n\nvar b64pad = \"\";\n/* base-64 pad character. \"=\" for strict RFC compliance   */\n\n/*\n * These are the functions you'll usually want to call\n * They take string arguments and return either hex or base-64 encoded strings\n */\n\nfunction hex_md5(s) {\n  return rstr2hex(rstr_md5(str2rstr_utf8(s)));\n}\n\nfunction b64_md5(s) {\n  return rstr2b64(rstr_md5(str2rstr_utf8(s)));\n}\n\nfunction any_md5(s, e) {\n  return rstr2any(rstr_md5(str2rstr_utf8(s)), e);\n}\n\nfunction hex_hmac_md5(k, d) {\n  return rstr2hex(rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d)));\n}\n\nfunction b64_hmac_md5(k, d) {\n  return rstr2b64(rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d)));\n}\n\nfunction any_hmac_md5(k, d, e) {\n  return rstr2any(rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d)), e);\n}\n/*\n * Perform a simple self-test to see if the VM is working\n */\n\n\nfunction md5_vm_test() {\n  return hex_md5(\"abc\").toLowerCase() == \"900150983cd24fb0d6963f7d28e17f72\";\n}\n/*\n * Calculate the MD5 of a raw string\n */\n\n\nfunction rstr_md5(s) {\n  return binl2rstr(binl_md5(rstr2binl(s), s.length * 8));\n}\n/*\n * Calculate the HMAC-MD5, of a key and some data (raw strings)\n */\n\n\nfunction rstr_hmac_md5(key, data) {\n  var bkey = rstr2binl(key);\n  if (bkey.length > 16) bkey = binl_md5(bkey, key.length * 8);\n  var ipad = Array(16),\n      opad = Array(16);\n\n  for (var i = 0; i < 16; i++) {\n    ipad[i] = bkey[i] ^ 0x36363636;\n    opad[i] = bkey[i] ^ 0x5C5C5C5C;\n  }\n\n  var hash = binl_md5(ipad.concat(rstr2binl(data)), 512 + data.length * 8);\n  return binl2rstr(binl_md5(opad.concat(hash), 512 + 128));\n}\n/*\n * Convert a raw string to a hex string\n */\n\n\nfunction rstr2hex(input) {\n  try {\n    hexcase;\n  } catch (e) {\n    hexcase = 0;\n  }\n\n  var hex_tab = hexcase ? \"0123456789ABCDEF\" : \"0123456789abcdef\";\n  var output = \"\";\n  var x;\n\n  for (var i = 0; i < input.length; i++) {\n    x = input.charCodeAt(i);\n    output += hex_tab.charAt(x >>> 4 & 0x0F) + hex_tab.charAt(x & 0x0F);\n  }\n\n  return output;\n}\n/*\n * Convert a raw string to a base-64 string\n */\n\n\nfunction rstr2b64(input) {\n  try {\n    b64pad;\n  } catch (e) {\n    b64pad = '';\n  }\n\n  var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n  var output = \"\";\n  var len = input.length;\n\n  for (var i = 0; i < len; i += 3) {\n    var triplet = input.charCodeAt(i) << 16 | (i + 1 < len ? input.charCodeAt(i + 1) << 8 : 0) | (i + 2 < len ? input.charCodeAt(i + 2) : 0);\n\n    for (var j = 0; j < 4; j++) {\n      if (i * 8 + j * 6 > input.length * 8) output += b64pad;else output += tab.charAt(triplet >>> 6 * (3 - j) & 0x3F);\n    }\n  }\n\n  return output;\n}\n/*\n * Convert a raw string to an arbitrary string encoding\n */\n\n\nfunction rstr2any(input, encoding) {\n  var divisor = encoding.length;\n  var i, j, q, x, quotient;\n  /* Convert to an array of 16-bit big-endian values, forming the dividend */\n\n  var dividend = Array(Math.ceil(input.length / 2));\n\n  for (i = 0; i < dividend.length; i++) {\n    dividend[i] = input.charCodeAt(i * 2) << 8 | input.charCodeAt(i * 2 + 1);\n  }\n  /*\n   * Repeatedly perform a long division. The binary array forms the dividend,\n   * the length of the encoding is the divisor. Once computed, the quotient\n   * forms the dividend for the next step. All remainders are stored for later\n   * use.\n   */\n\n\n  var full_length = Math.ceil(input.length * 8 / (Math.log(encoding.length) / Math.log(2)));\n  var remainders = Array(full_length);\n\n  for (j = 0; j < full_length; j++) {\n    quotient = Array();\n    x = 0;\n\n    for (i = 0; i < dividend.length; i++) {\n      x = (x << 16) + dividend[i];\n      q = Math.floor(x / divisor);\n      x -= q * divisor;\n      if (quotient.length > 0 || q > 0) quotient[quotient.length] = q;\n    }\n\n    remainders[j] = x;\n    dividend = quotient;\n  }\n  /* Convert the remainders to the output string */\n\n\n  var output = \"\";\n\n  for (i = remainders.length - 1; i >= 0; i--) {\n    output += encoding.charAt(remainders[i]);\n  }\n\n  return output;\n}\n/*\n * Encode a string as utf-8.\n * For efficiency, this assumes the input is valid utf-16.\n */\n\n\nfunction str2rstr_utf8(input) {\n  var output = \"\";\n  var i = -1;\n  var x, y;\n\n  while (++i < input.length) {\n    /* Decode utf-16 surrogate pairs */\n    x = input.charCodeAt(i);\n    y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;\n\n    if (0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF) {\n      x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);\n      i++;\n    }\n    /* Encode output as utf-8 */\n\n\n    if (x <= 0x7F) output += String.fromCharCode(x);else if (x <= 0x7FF) output += String.fromCharCode(0xC0 | x >>> 6 & 0x1F, 0x80 | x & 0x3F);else if (x <= 0xFFFF) output += String.fromCharCode(0xE0 | x >>> 12 & 0x0F, 0x80 | x >>> 6 & 0x3F, 0x80 | x & 0x3F);else if (x <= 0x1FFFFF) output += String.fromCharCode(0xF0 | x >>> 18 & 0x07, 0x80 | x >>> 12 & 0x3F, 0x80 | x >>> 6 & 0x3F, 0x80 | x & 0x3F);\n  }\n\n  return output;\n}\n/*\n * Encode a string as utf-16\n */\n\n\nfunction str2rstr_utf16le(input) {\n  var output = \"\";\n\n  for (var i = 0; i < input.length; i++) {\n    output += String.fromCharCode(input.charCodeAt(i) & 0xFF, input.charCodeAt(i) >>> 8 & 0xFF);\n  }\n\n  return output;\n}\n\nfunction str2rstr_utf16be(input) {\n  var output = \"\";\n\n  for (var i = 0; i < input.length; i++) {\n    output += String.fromCharCode(input.charCodeAt(i) >>> 8 & 0xFF, input.charCodeAt(i) & 0xFF);\n  }\n\n  return output;\n}\n/*\n * Convert a raw string to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction rstr2binl(input) {\n  var output = Array(input.length >> 2);\n\n  for (var i = 0; i < output.length; i++) {\n    output[i] = 0;\n  }\n\n  for (var i = 0; i < input.length * 8; i += 8) {\n    output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Convert an array of little-endian words to a string\n */\n\n\nfunction binl2rstr(input) {\n  var output = \"\";\n\n  for (var i = 0; i < input.length * 32; i += 8) {\n    output += String.fromCharCode(input[i >> 5] >>> i % 32 & 0xFF);\n  }\n\n  return output;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction binl_md5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[(len + 64 >>> 9 << 4) + 14] = len;\n  var a = 1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d = 271733878;\n\n  for (var i = 0; i < x.length; i += 16) {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n    a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n    d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n    a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n    c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n    d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safe_add(a, olda);\n    b = safe_add(b, oldb);\n    c = safe_add(c, oldc);\n    d = safe_add(d, oldd);\n  }\n\n  return Array(a, b, c, d);\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5_cmn(q, a, b, x, s, t) {\n  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n}\n\nfunction md5_ff(a, b, c, d, x, s, t) {\n  return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5_gg(a, b, c, d, x, s, t) {\n  return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5_hh(a, b, c, d, x, s, t) {\n  return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5_ii(a, b, c, d, x, s, t) {\n  return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safe_add(x, y) {\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xFFFF;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bit_rol(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n\nexport { hex_md5 };",{"version":3,"sources":["/home/beanyon/Desktop/workspace/time-partner/src/libs/md5.js"],"names":["hexcase","b64pad","hex_md5","s","rstr2hex","rstr_md5","str2rstr_utf8","b64_md5","rstr2b64","any_md5","e","rstr2any","hex_hmac_md5","k","d","rstr_hmac_md5","b64_hmac_md5","any_hmac_md5","md5_vm_test","toLowerCase","binl2rstr","binl_md5","rstr2binl","length","key","data","bkey","ipad","Array","opad","i","hash","concat","input","hex_tab","output","x","charCodeAt","charAt","tab","len","triplet","j","encoding","divisor","q","quotient","dividend","Math","ceil","full_length","log","remainders","floor","y","String","fromCharCode","str2rstr_utf16le","str2rstr_utf16be","a","b","c","olda","oldb","oldc","oldd","md5_ff","md5_gg","md5_hh","md5_ii","safe_add","md5_cmn","t","bit_rol","lsw","msw","num","cnt"],"mappings":"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","sourcesContent":["/*\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\n\n/*\n * Configurable variables. You may need to tweak these to be compatible with\n * the server-side, but the defaults work in most cases.\n */\nvar hexcase = 0; /* hex output format. 0 - lowercase; 1 - uppercase        */\nvar b64pad = \"\"; /* base-64 pad character. \"=\" for strict RFC compliance   */\n\n/*\n * These are the functions you'll usually want to call\n * They take string arguments and return either hex or base-64 encoded strings\n */\nfunction hex_md5(s) { return rstr2hex(rstr_md5(str2rstr_utf8(s))); }\n\nfunction b64_md5(s) { return rstr2b64(rstr_md5(str2rstr_utf8(s))); }\n\nfunction any_md5(s, e) { return rstr2any(rstr_md5(str2rstr_utf8(s)), e); }\n\nfunction hex_hmac_md5(k, d) { return rstr2hex(rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d))); }\n\nfunction b64_hmac_md5(k, d) { return rstr2b64(rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d))); }\n\nfunction any_hmac_md5(k, d, e) { return rstr2any(rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d)), e); }\n\n/*\n * Perform a simple self-test to see if the VM is working\n */\nfunction md5_vm_test() {\n    return hex_md5(\"abc\").toLowerCase() == \"900150983cd24fb0d6963f7d28e17f72\";\n}\n\n/*\n * Calculate the MD5 of a raw string\n */\nfunction rstr_md5(s) {\n    return binl2rstr(binl_md5(rstr2binl(s), s.length * 8));\n}\n\n/*\n * Calculate the HMAC-MD5, of a key and some data (raw strings)\n */\nfunction rstr_hmac_md5(key, data) {\n    var bkey = rstr2binl(key);\n    if (bkey.length > 16) bkey = binl_md5(bkey, key.length * 8);\n\n    var ipad = Array(16),\n        opad = Array(16);\n    for (var i = 0; i < 16; i++) {\n        ipad[i] = bkey[i] ^ 0x36363636;\n        opad[i] = bkey[i] ^ 0x5C5C5C5C;\n    }\n\n    var hash = binl_md5(ipad.concat(rstr2binl(data)), 512 + data.length * 8);\n    return binl2rstr(binl_md5(opad.concat(hash), 512 + 128));\n}\n\n/*\n * Convert a raw string to a hex string\n */\nfunction rstr2hex(input) {\n    try { hexcase } catch (e) { hexcase = 0; }\n    var hex_tab = hexcase ? \"0123456789ABCDEF\" : \"0123456789abcdef\";\n    var output = \"\";\n    var x;\n    for (var i = 0; i < input.length; i++) {\n        x = input.charCodeAt(i);\n        output += hex_tab.charAt((x >>> 4) & 0x0F) +\n            hex_tab.charAt(x & 0x0F);\n    }\n    return output;\n}\n\n/*\n * Convert a raw string to a base-64 string\n */\nfunction rstr2b64(input) {\n    try { b64pad } catch (e) { b64pad = ''; }\n    var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    var output = \"\";\n    var len = input.length;\n    for (var i = 0; i < len; i += 3) {\n        var triplet = (input.charCodeAt(i) << 16) |\n            (i + 1 < len ? input.charCodeAt(i + 1) << 8 : 0) |\n            (i + 2 < len ? input.charCodeAt(i + 2) : 0);\n        for (var j = 0; j < 4; j++) {\n            if (i * 8 + j * 6 > input.length * 8) output += b64pad;\n            else output += tab.charAt((triplet >>> 6 * (3 - j)) & 0x3F);\n        }\n    }\n    return output;\n}\n\n/*\n * Convert a raw string to an arbitrary string encoding\n */\nfunction rstr2any(input, encoding) {\n    var divisor = encoding.length;\n    var i, j, q, x, quotient;\n\n    /* Convert to an array of 16-bit big-endian values, forming the dividend */\n    var dividend = Array(Math.ceil(input.length / 2));\n    for (i = 0; i < dividend.length; i++) {\n        dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);\n    }\n\n    /*\n     * Repeatedly perform a long division. The binary array forms the dividend,\n     * the length of the encoding is the divisor. Once computed, the quotient\n     * forms the dividend for the next step. All remainders are stored for later\n     * use.\n     */\n    var full_length = Math.ceil(input.length * 8 /\n        (Math.log(encoding.length) / Math.log(2)));\n    var remainders = Array(full_length);\n    for (j = 0; j < full_length; j++) {\n        quotient = Array();\n        x = 0;\n        for (i = 0; i < dividend.length; i++) {\n            x = (x << 16) + dividend[i];\n            q = Math.floor(x / divisor);\n            x -= q * divisor;\n            if (quotient.length > 0 || q > 0)\n                quotient[quotient.length] = q;\n        }\n        remainders[j] = x;\n        dividend = quotient;\n    }\n\n    /* Convert the remainders to the output string */\n    var output = \"\";\n    for (i = remainders.length - 1; i >= 0; i--)\n        output += encoding.charAt(remainders[i]);\n\n    return output;\n}\n\n/*\n * Encode a string as utf-8.\n * For efficiency, this assumes the input is valid utf-16.\n */\nfunction str2rstr_utf8(input) {\n    var output = \"\";\n    var i = -1;\n    var x, y;\n\n    while (++i < input.length) {\n        /* Decode utf-16 surrogate pairs */\n        x = input.charCodeAt(i);\n        y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;\n        if (0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF) {\n            x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);\n            i++;\n        }\n\n        /* Encode output as utf-8 */\n        if (x <= 0x7F)\n            output += String.fromCharCode(x);\n        else if (x <= 0x7FF)\n            output += String.fromCharCode(0xC0 | ((x >>> 6) & 0x1F),\n                0x80 | (x & 0x3F));\n        else if (x <= 0xFFFF)\n            output += String.fromCharCode(0xE0 | ((x >>> 12) & 0x0F),\n                0x80 | ((x >>> 6) & 0x3F),\n                0x80 | (x & 0x3F));\n        else if (x <= 0x1FFFFF)\n            output += String.fromCharCode(0xF0 | ((x >>> 18) & 0x07),\n                0x80 | ((x >>> 12) & 0x3F),\n                0x80 | ((x >>> 6) & 0x3F),\n                0x80 | (x & 0x3F));\n    }\n    return output;\n}\n\n/*\n * Encode a string as utf-16\n */\nfunction str2rstr_utf16le(input) {\n    var output = \"\";\n    for (var i = 0; i < input.length; i++)\n        output += String.fromCharCode(input.charCodeAt(i) & 0xFF,\n            (input.charCodeAt(i) >>> 8) & 0xFF);\n    return output;\n}\n\nfunction str2rstr_utf16be(input) {\n    var output = \"\";\n    for (var i = 0; i < input.length; i++)\n        output += String.fromCharCode((input.charCodeAt(i) >>> 8) & 0xFF,\n            input.charCodeAt(i) & 0xFF);\n    return output;\n}\n\n/*\n * Convert a raw string to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\nfunction rstr2binl(input) {\n    var output = Array(input.length >> 2);\n    for (var i = 0; i < output.length; i++)\n        output[i] = 0;\n    for (var i = 0; i < input.length * 8; i += 8)\n        output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << (i % 32);\n    return output;\n}\n\n/*\n * Convert an array of little-endian words to a string\n */\nfunction binl2rstr(input) {\n    var output = \"\";\n    for (var i = 0; i < input.length * 32; i += 8)\n        output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xFF);\n    return output;\n}\n\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\nfunction binl_md5(x, len) {\n    /* append padding */\n    x[len >> 5] |= 0x80 << ((len) % 32);\n    x[(((len + 64) >>> 9) << 4) + 14] = len;\n\n    var a = 1732584193;\n    var b = -271733879;\n    var c = -1732584194;\n    var d = 271733878;\n\n    for (var i = 0; i < x.length; i += 16) {\n        var olda = a;\n        var oldb = b;\n        var oldc = c;\n        var oldd = d;\n\n        a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n        d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n        c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n        b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n        a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n        d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n        c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n        b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n        a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n        d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n        c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n        b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n        a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n        d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n        c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n        b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n\n        a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n        d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n        c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n        b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n        a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n        d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n        c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n        b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n        a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n        d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n        c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n        b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n        a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n        d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n        c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n        b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n\n        a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n        d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n        c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n        b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n        a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n        d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n        c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n        b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n        a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n        d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n        c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n        b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n        a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n        d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n        c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n        b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n\n        a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n        d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n        c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n        b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n        a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n        d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n        c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n        b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n        a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n        d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n        c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n        b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n        a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n        d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n        c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n        b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n\n        a = safe_add(a, olda);\n        b = safe_add(b, oldb);\n        c = safe_add(c, oldc);\n        d = safe_add(d, oldd);\n    }\n    return Array(a, b, c, d);\n}\n\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\nfunction md5_cmn(q, a, b, x, s, t) {\n    return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n}\n\nfunction md5_ff(a, b, c, d, x, s, t) {\n    return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);\n}\n\nfunction md5_gg(a, b, c, d, x, s, t) {\n    return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);\n}\n\nfunction md5_hh(a, b, c, d, x, s, t) {\n    return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5_ii(a, b, c, d, x, s, t) {\n    return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);\n}\n\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\nfunction safe_add(x, y) {\n    var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n    return (msw << 16) | (lsw & 0xFFFF);\n}\n\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\nfunction bit_rol(num, cnt) {\n    return (num << cnt) | (num >>> (32 - cnt));\n}\n\nexport {\n    hex_md5\n}"]}]}