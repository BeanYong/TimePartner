{"remainingRequest":"/home/beanyon/Desktop/workspace/time-partner/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/beanyon/Desktop/workspace/time-partner/src/components/Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/beanyon/Desktop/workspace/time-partner/src/components/Home.vue","mtime":1554813757857},{"path":"/home/beanyon/Desktop/workspace/time-partner/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/beanyon/Desktop/workspace/time-partner/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/beanyon/Desktop/workspace/time-partner/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'Home',\n  data() {\n    return {\n      // 今日数据\n      today: {\n        date: '这里是今天的日期',\n        slogan: '这是我们相遇的第几天',\n        minutesSum: 0\n      },\n      // 时间卡片数组\n      timeCards: [],\n      // 显示日期选择对话框\n      showDateSelecter: false,\n      // 用户选择的日期\n      date: undefined\n    }\n  },\n  methods: {\n    /**\n     * 初始化\n     */\n    init() {\n      if(!this.$cookies.get('id') || this.$cookies.get('id') == -1) {\n        let tel = this.$cookies.get('tel')\n        let password = this.$cookies.get('password')\n        if(tel && password){\n          this.login(tel, password, 'home')\n        } else {\n          this.$router.push({ name: 'sign-in' });\n        }\n      }\n      \n      this.today.date = new Date().format('yyyy-MM-dd')\n      this.getTodayTimeCard()\n      this.getUserLoginTimes()\n    },\n\n    /**\n     * 获取用户登录过的天数\n     */\n    getUserLoginTimes() {\n      this.$http.get(this.BASE_API + '/get-user-login-times?user_id=' + this.$cookies.get('id')).then(response => {\n        if (response.body.result) {\n          if(response.body.data.count == 0) {\n            this.today.slogan = '登录一下，开始一段故事'\n          } else {\n            this.today.slogan = '这是我们相遇的第' + response.body.data.count + '天'\n          }\n        }\n      })\n    },\n\n    /**\n     * 更新分钟和\n     */\n    updateMinutesSum() {\n      let sum = 0\n      for(let timeCard of this.timeCards) {\n        // 时间卡片的总时间\n        let timeCardSum = 0\n\n        for(let timeSpan of timeCard.timeSpans) {\n          if(timeSpan.startTime && timeSpan.endTime) {\n            let span = timeSpan.endTime - timeSpan.startTime\n            let spanSum = span / 1000 / 60\n            // 时间卡片的总时间\n            timeCardSum += Math.ceil(spanSum)\n            // 今日总时间\n            sum += spanSum\n          }\n        }\n\n        timeCard.timeCardSum = timeCardSum\n      }\n      this.today.minutesSum = Math.ceil(sum)\n    },\n\n    /**\n     * 显示选择日期对话框\n     */\n    showSelectDate() {\n      this.showDateSelecter = true\n    },\n\n    /**\n     * 隐藏选择日期对话框\n     */\n    hideSelectDate() {\n      this.showDateSelecter = false\n    },\n\n    /**\n     * 日期改变回调事件\n     */\n    onDateChange(d) {\n      if(d != undefined) {\n        let day = this.date.getDate()\n        let month = this.date.getMonth() + 1\n        let year = this.date.getFullYear()\n        let d = year + '-' + month + '-' + day\n        // 向服务器请求对应日期的数据\n        this.$http.get(this.BASE_API + '/get-time-card-by-date?user_id=' + this.$cookies.get('id') + '&date=' + d).then(response => {\n          if (response.body.result) {\n            this.timeCards = response.body.data\n            this.updateMinutesSum()\n            this.showDateSelecter = false\n            this.date = undefined\n          } else {\n            this.$toast.warning(response.body.message)\n          }\n        })\n      }\n    },\n\n    /**\n     * 创建时间卡片\n     */\n    createTimeCard() {\n      this.$http.get(this.BASE_API + '/create-time-card?user_id=' + this.$cookies.get('id')).then(response => {\n        if (response.body.result) {\n          this.getTodayTimeCard()\n          this.$toast.success(response.body.message)\n        } else {\n          this.$toast.error(response.body.message)\n        }\n      })\n    },\n\n    /**\n     * 为时间卡片添加时间段\n     */\n    createTimeSpan(cardIndex) {\n      this.timeCards[cardIndex].timeSpans.push({\n        id: -1,\n        startTime: 0,\n        endTime: 0\n      })\n    },\n\n    /**\n     * 获取今天的时间卡片\n     */\n    getTodayTimeCard() {\n      this.$http.get(this.BASE_API + '/get-today-time-card?user_id=' + this.$cookies.get('id')).then(response => {\n        if (response.body.result) {\n          this.timeCards = response.body.data\n          this.updateMinutesSum()\n        }\n      })\n    },\n\n    /**\n     * 事件选择器值发生变化的监听器，用于创建TimeCard的TimeSpan\n     */\n    onDatePickerChange(cardIndex, spanIndex, type) {\n      let startTime = this.timeCards[cardIndex].timeSpans[spanIndex].startTime\n      let endTime = this.timeCards[cardIndex].timeSpans[spanIndex].endTime\n      let cardId = this.timeCards[cardIndex].id\n      let spanId = this.timeCards[cardIndex].timeSpans[spanIndex].id\n\n      if(typeof startTime == 'object') {\n        startTime = startTime.getTime()\n      }\n\n      if(typeof endTime == 'object') {\n        endTime = endTime.getTime()\n      }\n      \n      if(endTime && startTime && parseInt((endTime - startTime)/1000) <= 0) {\n        this.$toast.error('开始时间必须小于结束时间，请重新输入')\n        this.timeCards[cardIndex].timeSpans[spanIndex].endTime = 0\n        return\n      }\n\n      if(spanId == -1) {\n        // 不存在，需要创建\n        if(startTime) {\n          // 使用开始时间创建\n          this.$http.get(this.BASE_API + '/create-time-span?card_id=' + cardId + '&start_time=' + startTime).then(response => {\n            if (response.body.result) {\n              this.getTodayTimeCard()\n              this.$toast.success(response.body.message)\n            } else {\n              this.$toast.error(response.body.message)\n            }\n          })\n        } else {\n          // 开始时间为空，无法创建\n          this.$toast.error('请先输入开始时间')\n          this.timeCards[cardIndex].timeSpans[spanIndex].endTime = 0\n          return\n        }\n      } else {\n        // 已经存在，更新\n        if(startTime && type == 0) {\n          // 开始时间不空，并且不是string类型\n          if(endTime - startTime >= 0) {\n            // 结束时间大于开始时间，更新\n            this.$http.get(this.BASE_API + '/update-time-span?card_id=' + cardId + '&span_id=' + spanId + '&start_time=' + startTime).then(response => {\n              if (response.body.result) {\n                this.getTodayTimeCard()\n                this.$toast.success(response.body.message)\n              } else {\n                this.$toast.error(response.body.message)\n              }\n            })\n          } else {\n            // 结束时间不大于开始时间，无法更新\n            this.$toast.error('开始时间必须小于结束时间，请重新输入')\n            this.timeCards[cardIndex].timeSpans[spanIndex].startTime = 0\n          }\n        }\n        \n        if(endTime && type == 1) {\n          // 结束时间不空，并且不是string类型\n          if(endTime - startTime >= 0) {\n            // 结束时间大于开始时间，更新\n            this.$http.get(this.BASE_API + '/update-time-span?card_id=' + cardId + '&span_id=' + spanId + '&end_time=' + endTime).then(response => {\n              if (response.body.result) {\n                this.getTodayTimeCard()\n                this.$toast.success(response.body.message)\n              } else {\n                this.$toast.error(response.body.message)\n              }\n            })\n          } else {\n            // 结束时间不大于开始时间，无法更新\n            this.$toast.error('开始时间必须小于结束时间，请重新输入')\n            this.timeCards[cardIndex].timeSpans[spanIndex].endTime = 0\n          }\n        }\n      }\n    },\n\n    /**\n     * 更新TimeCard的activity\n     */\n    updateCardActivity(cardIndex) {\n      let cardId = this.timeCards[cardIndex].id\n      let activity = this.timeCards[cardIndex].activity.trim()\n\n      if(activity.length > 0){\n        this.$http.get(this.BASE_API + '/update-card-activity?card_id=' + cardId + '&activity=' + activity).then(response => {\n          if (response.body.result) {\n            this.$toast.success(response.body.message)\n          } else {\n            this.$toast.error(response.body.message)\n          }\n        })\n      }\n    },\n\n    /**\n     * 删除时间卡片\n     */\n    deleteTimeCard(cardIndex) {\n      let cardId = this.timeCards[cardIndex].id\n\n      this.$http.get(this.BASE_API + '/delete-time-card?card_id=' + cardId).then(response => {\n        if (response.body.result) {\n          if (this.timeCards.length > 1){\n            this.getTodayTimeCard()\n          } else {\n            this.timeCards = []\n            this.today.minutesSum = 0\n          }\n          this.$toast.success(response.body.message)\n        } else {\n          this.$toast.error(response.body.message)\n        }\n      })\n    }\n  },\n  mounted() {\n    this.init()\n  }\n}\n",{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Home.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <mu-container>\n    <!-- TitleBar -->\n    <mu-appbar style=\"width: 100%;\" color=\"primary\">\n      <mu-button icon slot=\"left\" @click=\"showSelectDate()\">\n        <mu-icon value=\"access_time\"></mu-icon>\n      </mu-button>\n      时间卡片\n      <mu-button icon slot=\"right\" @click=\"createTimeCard()\">\n        <mu-icon value=\"add\"></mu-icon>\n      </mu-button>\n    </mu-appbar>\n    <!-- Main Content -->\n    <div style=\"width: 100%; background: #fff; padding: 18px;\">\n      <router-link to=\"/sign-in\">\n        <mu-card class=\"card-header\">\n          <mu-card-header :title=\"today.date\" :sub-title=\"today.slogan\">\n            <mu-avatar slot=\"avatar\">\n                <img src=\"../assets/avatar.jpg\">\n            </mu-avatar>\n          </mu-card-header>\n          <mu-paper class=\"demo-paper card-header-panel\" :z-depth=\"0\" :circle=\"true\">\n            {{today.minutesSum || 0}} min\n          </mu-paper>\n        </mu-card>\n      </router-link>\n      <mu-card class=\"time-card\" v-for=\"(timeCard, cardIndex) in timeCards\" :key=\"cardIndex\">\n        <mu-icon value=\"clear\" class=\"delete-time-card\" @click=\"deleteTimeCard(cardIndex)\"></mu-icon>\n        <mu-card-text>\n          <mu-form :model=\"timeCard\" class=\"mu-demo-form\">\n            <mu-form-item prop=\"activity\">\n              <mu-text-field placeholder='请输入活动名称，如‘学习英语’' v-model=\"timeCard.activity\" @change=\"updateCardActivity(cardIndex)\"></mu-text-field>\n            </mu-form-item>\n            <mu-flex class=\"flex-wrapper\" align-items=\"center\" v-for=\"(timeSpan, spanIndex) in timeCard.timeSpans\" :key=\"spanIndex\">\n              <mu-flex class=\"flex-demo\" justify-content=\"center\" fill>\n                <mu-date-input placeholder=\"开始时间\" v-model=\"timeSpan.startTime\" type=\"time\" view-type=\"list\" clock-type=\"24hr\" @change=\"onDatePickerChange(cardIndex, spanIndex, 0)\"></mu-date-input>\n              </mu-flex>\n              <mu-flex class=\"flex-demo\" justify-content=\"center\" fill>\n                <mu-date-input placeholder=\"结束时间\" v-model=\"timeSpan.endTime\" type=\"time\" view-type=\"list\" clock-type=\"24hr\" @change=\"onDatePickerChange(cardIndex, spanIndex, 1)\"></mu-date-input>\n              </mu-flex>\n            </mu-flex>\n            <mu-flex class=\"time-card-sum\">\n              小计： {{timeCard.timeCardSum || 0}} min\n            </mu-flex>\n            <mu-button full-width color=\"primary\" @click=\"createTimeSpan(cardIndex)\">\n              <mu-icon value=\"add\" left></mu-icon>\n              添加时间段\n            </mu-button>\n          </mu-form>\n        </mu-card-text>\n      </mu-card>\n    </div>\n    <!-- 半透明mask -->\n    <mu-container v-if=\"showDateSelecter\" class=\"date-selector-mask\">\n    </mu-container>\n    <mu-container v-if=\"showDateSelecter\">\n      <mu-flex justify-content=\"center\" align-items=\"center\" class=\"date-selector\">\n        <mu-paper :z-depth=\"1\">\n          <mu-date-picker :date.sync=\"date\" :change=\"onDateChange(date)\"></mu-date-picker>\n        </mu-paper>\n        <mu-button icon @click=\"hideSelectDate()\" class=\"date-selector-closer\">\n          <mu-icon value=\"highlight_off\"></mu-icon>\n        </mu-button>\n      </mu-flex>\n    </mu-container>\n    <!-- <router-link to=\"/sign-up\">\n      <mu-button full-width color=\"primary\">\n        <mu-icon value=\"add\" left></mu-icon>\n        注册\n      </mu-button>\n    </router-link> -->\n  </mu-container>\n</template>\n<script>\nexport default {\n  name: 'Home',\n  data() {\n    return {\n      // 今日数据\n      today: {\n        date: '这里是今天的日期',\n        slogan: '这是我们相遇的第几天',\n        minutesSum: 0\n      },\n      // 时间卡片数组\n      timeCards: [],\n      // 显示日期选择对话框\n      showDateSelecter: false,\n      // 用户选择的日期\n      date: undefined\n    }\n  },\n  methods: {\n    /**\n     * 初始化\n     */\n    init() {\n      if(!this.$cookies.get('id') || this.$cookies.get('id') == -1) {\n        let tel = this.$cookies.get('tel')\n        let password = this.$cookies.get('password')\n        if(tel && password){\n          this.login(tel, password, 'home')\n        } else {\n          this.$router.push({ name: 'sign-in' });\n        }\n      }\n      \n      this.today.date = new Date().format('yyyy-MM-dd')\n      this.getTodayTimeCard()\n      this.getUserLoginTimes()\n    },\n\n    /**\n     * 获取用户登录过的天数\n     */\n    getUserLoginTimes() {\n      this.$http.get(this.BASE_API + '/get-user-login-times?user_id=' + this.$cookies.get('id')).then(response => {\n        if (response.body.result) {\n          if(response.body.data.count == 0) {\n            this.today.slogan = '登录一下，开始一段故事'\n          } else {\n            this.today.slogan = '这是我们相遇的第' + response.body.data.count + '天'\n          }\n        }\n      })\n    },\n\n    /**\n     * 更新分钟和\n     */\n    updateMinutesSum() {\n      let sum = 0\n      for(let timeCard of this.timeCards) {\n        // 时间卡片的总时间\n        let timeCardSum = 0\n\n        for(let timeSpan of timeCard.timeSpans) {\n          if(timeSpan.startTime && timeSpan.endTime) {\n            let span = timeSpan.endTime - timeSpan.startTime\n            let spanSum = span / 1000 / 60\n            // 时间卡片的总时间\n            timeCardSum += Math.ceil(spanSum)\n            // 今日总时间\n            sum += spanSum\n          }\n        }\n\n        timeCard.timeCardSum = timeCardSum\n      }\n      this.today.minutesSum = Math.ceil(sum)\n    },\n\n    /**\n     * 显示选择日期对话框\n     */\n    showSelectDate() {\n      this.showDateSelecter = true\n    },\n\n    /**\n     * 隐藏选择日期对话框\n     */\n    hideSelectDate() {\n      this.showDateSelecter = false\n    },\n\n    /**\n     * 日期改变回调事件\n     */\n    onDateChange(d) {\n      if(d != undefined) {\n        let day = this.date.getDate()\n        let month = this.date.getMonth() + 1\n        let year = this.date.getFullYear()\n        let d = year + '-' + month + '-' + day\n        // 向服务器请求对应日期的数据\n        this.$http.get(this.BASE_API + '/get-time-card-by-date?user_id=' + this.$cookies.get('id') + '&date=' + d).then(response => {\n          if (response.body.result) {\n            this.timeCards = response.body.data\n            this.updateMinutesSum()\n            this.showDateSelecter = false\n            this.date = undefined\n          } else {\n            this.$toast.warning(response.body.message)\n          }\n        })\n      }\n    },\n\n    /**\n     * 创建时间卡片\n     */\n    createTimeCard() {\n      this.$http.get(this.BASE_API + '/create-time-card?user_id=' + this.$cookies.get('id')).then(response => {\n        if (response.body.result) {\n          this.getTodayTimeCard()\n          this.$toast.success(response.body.message)\n        } else {\n          this.$toast.error(response.body.message)\n        }\n      })\n    },\n\n    /**\n     * 为时间卡片添加时间段\n     */\n    createTimeSpan(cardIndex) {\n      this.timeCards[cardIndex].timeSpans.push({\n        id: -1,\n        startTime: 0,\n        endTime: 0\n      })\n    },\n\n    /**\n     * 获取今天的时间卡片\n     */\n    getTodayTimeCard() {\n      this.$http.get(this.BASE_API + '/get-today-time-card?user_id=' + this.$cookies.get('id')).then(response => {\n        if (response.body.result) {\n          this.timeCards = response.body.data\n          this.updateMinutesSum()\n        }\n      })\n    },\n\n    /**\n     * 事件选择器值发生变化的监听器，用于创建TimeCard的TimeSpan\n     */\n    onDatePickerChange(cardIndex, spanIndex, type) {\n      let startTime = this.timeCards[cardIndex].timeSpans[spanIndex].startTime\n      let endTime = this.timeCards[cardIndex].timeSpans[spanIndex].endTime\n      let cardId = this.timeCards[cardIndex].id\n      let spanId = this.timeCards[cardIndex].timeSpans[spanIndex].id\n\n      if(typeof startTime == 'object') {\n        startTime = startTime.getTime()\n      }\n\n      if(typeof endTime == 'object') {\n        endTime = endTime.getTime()\n      }\n      \n      if(endTime && startTime && parseInt((endTime - startTime)/1000) <= 0) {\n        this.$toast.error('开始时间必须小于结束时间，请重新输入')\n        this.timeCards[cardIndex].timeSpans[spanIndex].endTime = 0\n        return\n      }\n\n      if(spanId == -1) {\n        // 不存在，需要创建\n        if(startTime) {\n          // 使用开始时间创建\n          this.$http.get(this.BASE_API + '/create-time-span?card_id=' + cardId + '&start_time=' + startTime).then(response => {\n            if (response.body.result) {\n              this.getTodayTimeCard()\n              this.$toast.success(response.body.message)\n            } else {\n              this.$toast.error(response.body.message)\n            }\n          })\n        } else {\n          // 开始时间为空，无法创建\n          this.$toast.error('请先输入开始时间')\n          this.timeCards[cardIndex].timeSpans[spanIndex].endTime = 0\n          return\n        }\n      } else {\n        // 已经存在，更新\n        if(startTime && type == 0) {\n          // 开始时间不空，并且不是string类型\n          if(endTime - startTime >= 0) {\n            // 结束时间大于开始时间，更新\n            this.$http.get(this.BASE_API + '/update-time-span?card_id=' + cardId + '&span_id=' + spanId + '&start_time=' + startTime).then(response => {\n              if (response.body.result) {\n                this.getTodayTimeCard()\n                this.$toast.success(response.body.message)\n              } else {\n                this.$toast.error(response.body.message)\n              }\n            })\n          } else {\n            // 结束时间不大于开始时间，无法更新\n            this.$toast.error('开始时间必须小于结束时间，请重新输入')\n            this.timeCards[cardIndex].timeSpans[spanIndex].startTime = 0\n          }\n        }\n        \n        if(endTime && type == 1) {\n          // 结束时间不空，并且不是string类型\n          if(endTime - startTime >= 0) {\n            // 结束时间大于开始时间，更新\n            this.$http.get(this.BASE_API + '/update-time-span?card_id=' + cardId + '&span_id=' + spanId + '&end_time=' + endTime).then(response => {\n              if (response.body.result) {\n                this.getTodayTimeCard()\n                this.$toast.success(response.body.message)\n              } else {\n                this.$toast.error(response.body.message)\n              }\n            })\n          } else {\n            // 结束时间不大于开始时间，无法更新\n            this.$toast.error('开始时间必须小于结束时间，请重新输入')\n            this.timeCards[cardIndex].timeSpans[spanIndex].endTime = 0\n          }\n        }\n      }\n    },\n\n    /**\n     * 更新TimeCard的activity\n     */\n    updateCardActivity(cardIndex) {\n      let cardId = this.timeCards[cardIndex].id\n      let activity = this.timeCards[cardIndex].activity.trim()\n\n      if(activity.length > 0){\n        this.$http.get(this.BASE_API + '/update-card-activity?card_id=' + cardId + '&activity=' + activity).then(response => {\n          if (response.body.result) {\n            this.$toast.success(response.body.message)\n          } else {\n            this.$toast.error(response.body.message)\n          }\n        })\n      }\n    },\n\n    /**\n     * 删除时间卡片\n     */\n    deleteTimeCard(cardIndex) {\n      let cardId = this.timeCards[cardIndex].id\n\n      this.$http.get(this.BASE_API + '/delete-time-card?card_id=' + cardId).then(response => {\n        if (response.body.result) {\n          if (this.timeCards.length > 1){\n            this.getTodayTimeCard()\n          } else {\n            this.timeCards = []\n            this.today.minutesSum = 0\n          }\n          this.$toast.success(response.body.message)\n        } else {\n          this.$toast.error(response.body.message)\n        }\n      })\n    }\n  },\n  mounted() {\n    this.init()\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.card-header {\n  position: relative;\n}\n.card-header-panel {\n  position: absolute;\n  right: 26px;\n  top: 6px;\n  height: 64px;\n  line-height: 64px;\n  text-align: center;\n  font-size: 16px;\n  font-weight: 400;\n  font-style: italic;\n}\n.time-card {\n  position: relative;\n  width: 100%;\n  margin: 12px auto;\n}\n.time-card-sum {\n  font-size: 18px;\n  float: right;\n  margin-bottom: 26px;\n}\n.delete-time-card {\n  width: 26px;\n  height: 26px;\n  position: absolute;\n  top: -8px;\n  right: -13px;\n  border: 1px solid #ccc;\n  border-radius: 50%;\n  background: #fff;\n}\n.flex-demo {\n  width: 0px;\n  text-align: center;\n}\n.date-selector-mask {\n  position: fixed;\n  width: 100vw;\n  height: 100vh;\n  position: fixed;\n  top: 0;\n  left: 0;\n  background: #000;\n  opacity: 0.7;\n  z-index: 1;\n}\n.date-selector {\n  position: fixed;\n  width: 100vw;\n  height: 100vh;\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 100;\n  display: flex;\n  flex-direction: row;\n}\n.date-selector-closer {\n  margin: 0 auto; \n  position: fixed; \n  bottom: 4vh;\n  color: #fff;\n  width: 72px;\n  height: 72px;\n}\n.date-selector-closer i {\n  font-size: 42px;\n}\n</style>\n"]}]}